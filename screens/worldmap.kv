#:import Calendar kivy.garden.calendar_widget.Calendar
#:import CircularTimePicker kivy.garden.circulardatetimepicker.CircularTimePicker
#:import MapView kivy.garden.mapview.MapView
#:import cos math.cos
#:import dates babel.dates
#:import datetime datetime

<MapScreen>:
    mapview: mapview

    FloatLayout:
        WorldMapView:
            id: mapview
            preview_coordinate: None
            add_meeting: False
            marker_triggered: False
            #min_zoom: 11
            lat: 48.8534
            lon: 2.3488
            on_add_meeting:
                popup = Factory.AddMeetingMenu()
                popup.coordinate = self.preview_coordinate
                popup.target = self
                popup.tmp_marker = self.tmp_map_marker
                self.add_meeting = False
                popup.open()

        AddMarkerButton:
            target_active: mapview.marker_triggered
            pos_hint: {'center': (.05, .95)}

            on_press: mapview.marker_triggered = True

        RecenterButton:
            pos_hint: {'center': (.95, .1)}
            disabled: False if mapview.location_marker else True

            on_press:
                if mapview.location_marker: mapview.center_on(mapview.location_marker.lat, mapview.location_marker.lon)


<AddMarkerButton@ImageButton>:
    target_active: True
    source: 'data/images/add_marker.png'
    size_hint: None, None
    size: list(map(dp, (100, 100)))
    opacity: .5 if self.disabled else (1 if not self.target_active else .7)


<RecenterButton@ImageButton>:
    source: 'data/images/recenter.png'
    size_hint: None, None
    size: list(map(dp, (100, 100)))
    opacity: .5 if self.disabled else (1 if self.state == 'normal' else .7)


<AddMeetingMenu>:
    target: None
    tmp_marker: None
    pos_hint: {'x': 1}
    data: add_meeting.data
    datetime: datetime.datetime.now()

    canvas:
        Clear:

    FloatLayout:

        ScreenManager:
            id: screenmanager
            pos_hint: {'top': 1}
            size_hint_y: .8
            on_touch_down:
                touch = args[1]
                root.target.remove_marker(root.tmp_marker)
                if not self.collide_point(*touch.pos): root.dismiss()

            canvas.before:
                Color:
                    a: .1
                Rectangle:
                    pos: self.x, self.y - self.height
                    size: [wh * 4 for wh in self.size]
                Color:
                BorderImage:
                    source: 'data/images/shadow.png'
                    border: 18, 18, 18, 18
                    pos: [xy - dp(15) for xy in self.pos]
                    size: [wh + dp(30) for wh in self.size]
                Color:
                Rectangle:
                    pos: self.pos
                    size: self.size

            AddMeetingScreen:
                id: add_meeting
                popup: root
                screenmanager: screenmanager
                data: [{'level': 1, 'textinput': False, 'values': ['1', '2', '3'], 'title': 'level', 'date_enabled': False}, {'title': 'title', 'multiline': False, 'textinput': True}, {'title': 'comment', 'multiline': True, 'textinput': True}, {'title': 'date', 'date_enabled': True, 'datetime': root.datetime, 'root': self}]
                name: 'add_meeting'

            SelectDateScreen:
                id: select_date
                popup: root
                screenmanager: screenmanager
                name: 'select_date'
                datetime: ''


<AddMeetingScreen@Screen>:
    popup: None
    screenmanager: None
    data: []

    BoxLayout:
        orientation: 'vertical'
        padding: (dp(20),)

        StyledLabel:
            bold: True
            color: rgba('#000000')
            font_size: sp(20)
            halign: 'center'
            text: 'add a meeting :'.upper()
            text_size: self.width, None

        FloatLayout:
            size_hint_y: 3

            RecycleView:
                id: recycleview
                data: root.data
                viewclass: 'InputLine'
                bar_color: rgba('#128fbd')
                bar_width: dp(5)
                pos_hint: {'center': (.5, .5)}

                RecycleBoxLayout:
                    id: data_container
                    default_size: None, dp(self.parent.height / 7.5)
                    default_size_hint: 1, None
                    size_hint_y: None
                    height: self.minimum_height
                    orientation: 'vertical'
                    spacing: dp(self.parent.height / 25)
                    padding: dp(30), 0

            Widget:
                pos_hint: {'y': 0}
                size_hint_y: None
                height: dp(50)
                opacity: abs(recycleview.scroll_y)

                canvas.after:
                    Color:
                    Rectangle:
                        source: 'data/images/white_gradient.png'
                        size: self.size
                        pos: self.pos

            Widget:
                pos_hint: {'top': 1}
                size_hint_y: None
                height: dp(50)
                opacity: abs(1 - recycleview.scroll_y)

                canvas.before:
                    PushMatrix:
                    Rotate:
                        angle: 180
                        origin: self.center

                canvas.after:
                    Color:
                    Rectangle:
                        source: 'data/images/white_gradient.png'
                        size: self.size
                        pos: self.pos
                    PopMatrix:


        Widget:
            size_hint_y: .2

        BoxLayout:
            spacing: dp(15)
            pos_hint: {'center_x': .5}
            size_hint: None, None
            size: self.minimum_size

            SubmitButton:
                text: 'add event'.upper()
                on_release: root.popup.add_meeting()

            SubmitButton:
                text: 'cancel'.upper()
                on_release: root.popup.dismiss()


<SelectDateScreen@Screen>:
    popup: None
    screenmanager: None
    data: []
    default_datetime: datetime.datetime.now()
    datetime: datetime.datetime.fromisoformat('{date}T{time}.000000'.format(date=calendar.date, time=timepicker.time)) if calendar.date and timepicker.time else None

    BoxLayout:
        orientation: 'vertical'
        padding: (dp(20),)

        StyledLabel:
            bold: True
            color: rgba('#000000')
            font_size: sp(20)
            halign: 'center'
            text: 'add a meeting :'.upper()
            text_size: self.width, None

        BoxLayout:
            size_hint_y: 3

            Calendar:
                id: calendar
                date: '{year}-{month}-{date}'.format(**{dmy: value if len(str(value)) > 1 else '0' + str(value) for dmy, value in zip(('date', 'month', 'year'), self.active_date)})
                background_color: .9, .9, .9, 1
                foreground_color: .2, .2, .2, 1

            CircularTimePicker:
                id: timepicker
                time: root.default_datetime.time()
                color: .2, .2, .2, 1
                selector_color: 1, 0, 0

        StyledLabel:
            size_hint_y: .2

        BoxLayout:
            spacing: dp(15)
            pos_hint: {'center_x': .5}
            size_hint: None, None
            size: self.minimum_size

            SubmitButton:
                text: 'save date'.upper()
                on_release:
                    root.screenmanager.current = 'add_meeting'
                    root.popup.datetime = root.datetime

            SubmitButton:
                text: 'cancel'.upper()
                on_release: root.screenmanager.current = 'add_meeting'


<InputLine@BoxLayout>:
    text: textinput.text
    spinner_option: spinner.text
    date: dateinput.date
    title: ''
    textinput: True
    values: []
    multiline: False
    date_enabled: False
    root: None
    datetime: None

    on_date_enabled:
        if self.date_enabled: self.textinput = False

    StyledLabel:
        text: (root.title).upper()
        font_size: sp(16)
        color: rgba('#000000')

    StyledTextInput:
        id: textinput
        multiline: root.multiline
        opacity: 1 if root.textinput else 0
        disabled: False if root.textinput else True
        pos_hint: {'center_y': .5}
        size_hint: (1 if root.textinput else .001), None
        height: self.font_size * 1.6 if not root.multiline else self.font_size * 5

    StyledSpinner:
        id: spinner
        values: root.values
        opacity: 1 if not root.textinput and not root.date_enabled else 0
        disabled: False if not root.textinput and not root.date_enabled else True
        pos_hint: {'center_y': .5}
        size_hint: (1 if not root.textinput and not root.date_enabled else .001), None
        height: self.font_size * 1.6

    StyledLabelButton:
        id: dateinput
        date: root.datetime
        color: rgba('#000000')
        text: '{} - {}'.format(dates.format_date(self.date, locale=app.language), dates.format_time(self.date, locale=app.language))
        font_size: sp(16)
        opacity: 1 if root.date_enabled else 0
        disabled: False if root.date_enabled else True
        pos_hint: {'center_y': .5}
        size_hint: (1 if root.date_enabled else .001), None
        height: self.font_size * 1.6
        on_press:
            if root.root and root.root.screenmanager: screenmanager = root.root.screenmanager
            if screenmanager: screenmanager.current = 'select_date'
            if screenmanager: screenmanager.current_screen.default_datetime = self.date


<StyledLabelButton@ButtonBehavior+StyledLabel>


<EventInfoPopup>:
    container: container

    canvas:
        Clear:

    FloatLayout:
        BoxLayout:
            id: container
            orientation: 'vertical'
            pos_hint: {'center': (.5, .5)}
            size_hint: .8, .8

            canvas.before:
                Color:
                Rectangle:
                    pos: self.pos
                    size: self.size

<EventItemBox>:
    title: ''
    content: ''

    StyledLabel:
        text: '{}:'.format(root.title)
        color: 0, 0, 0, 1
        bold: True

    StyledLabel:
        text: root.content
        color: 0, 0, 0, 1

<LocationMarker>:
    size_hint: None, None
    size: dp(50), dp(50)

    canvas:
        Clear:

    Image:
        source: 'data/images/location_marker.png'
        pos_hint: {'center': (.5, .5)}
        size_hint: None, None
        size: self.parent.size

    Image:
        source: 'data/images/location_marker_shadow.png'
        pos_hint: {'center': (.5, .5)}
        size_hint: None, None
        size: self.parent.size
        opacity: abs(cos(2 * app.time))
